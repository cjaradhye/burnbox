# Spring Boot configuration for Render deployment
spring:
  profiles:
    active: render
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        use_sql_comments: false
        generate_statistics: false
        cache:
          use_second_level_cache: false
          use_query_cache: false
    
  # Redis Configuration
  data:
    redis:
      url: ${REDIS_URL}
      timeout: 10s
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          
  # OAuth2 Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${RENDER_EXTERNAL_URL}/login/oauth2/code/google
            scope:
              - email
              - profile
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
            user-name-attribute: email

# Server Configuration
server:
  port: ${PORT:8080}
  forward-headers-strategy: framework
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

# Logging Configuration
logging:
  level:
    com.disposablemailservice: INFO
    org.springframework.security: WARN
    org.apache.kafka: WARN
    org.springframework.web: WARN
    org.hibernate: WARN
    com.zaxxer.hikari: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
  file:
    name: /app/logs/burnbox.log
    max-size: 10MB
    max-history: 30

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  health:
    redis:
      enabled: true
    db:
      enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

# Application Configuration
app:
  # Kafka Configuration (disabled for Render)
  kafka:
    enabled: false
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    
  # Frontend Configuration
  frontend:
    url: ${FRONTEND_URL:https://burnbox-frontend.onrender.com}
    
  # Email Configuration
  email:
    domain: ${EMAIL_DOMAIN:nahneedpfft.com}
    
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET:your-super-long-256-bit-secret-make-it-unique-and-secure-for-production}
    expiration: ${JWT_EXPIRATION:86400000}
    
  # AWS Configuration (optional)
  aws:
    region: ${AWS_REGION:us-west-2}
    s3:
      bucket: ${AWS_S3_BUCKET:burnbox-email-storage}
    ses:
      from-email: ${SES_FROM_EMAIL:noreply@nahneedpfft.com}

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:https://burnbox-spark.vercel.app,http://localhost:3000}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"
  allow-credentials: true
  max-age: 3600

# DynamoDB Configuration
dynamodb:
  endpoint: ${DYNAMODB_ENDPOINT:}
  region: ${AWS_REGION:us-west-2}
  local: false