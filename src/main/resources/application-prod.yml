# Production profile configuration
spring:
  profiles:
    active: prod
  application:
    name: burnbox
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/burnbox}
    username: ${DATABASE_USERNAME:burnbox}
    password: ${DATABASE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: ${DB_POOL_MIN:5}
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
    
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 25
          order_inserts: true
          order_updates: true
    
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: openid,profile,email
            redirect-uri: ${BASE_URL}/login/oauth2/code/google
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs

  kafka:
    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.block.ms: 5000
        request.timeout.ms: 10000
        delivery.timeout.ms: 15000
        batch.size: 16384
        linger.ms: 10
    consumer:
      group-id: ${KAFKA_GROUP_ID:burnbox-service}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000

server:
  port: ${PORT:8080}
  forward-headers-strategy: framework
  tomcat:
    remote-ip-header: x-forwarded-for
    protocol-header: x-forwarded-proto
    max-threads: ${SERVER_MAX_THREADS:200}
    min-spare-threads: ${SERVER_MIN_THREADS:10}
    connection-timeout: 20000
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024

logging:
  level:
    com.disposablemailservice: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    org.apache.kafka: WARN
    org.springframework.web: WARN
    org.hibernate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE:/app/logs/burnbox.log}
    max-size: 100MB
    max-history: 30

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

aws:
  region: ${AWS_REGION:ap-south-1}
  access-key-id: ${AWS_ACCESS_KEY_ID:}
  secret-access-key: ${AWS_SECRET_ACCESS_KEY:}
  s3:
    bucket-name: ${AWS_S3_BUCKET:burnbox-email-storage}
  sns:
    topic: ${AWS_SNS_TOPIC}
  dynamodb:
    endpoint: ${DYNAMODB_ENDPOINT:}
    mailbox-table: ${DYNAMODB_MAILBOX_TABLE:mailboxes}
    message-table: ${DYNAMODB_MESSAGE_TABLE:messages}

app:
  kafka:
    enabled: ${KAFKA_ENABLED:true}
  jwt:
    secret: ${JWT_SECRET}
    expiration: ${JWT_EXPIRATION:86400000}
  frontend:
    url: ${FRONTEND_URL:http://localhost:3000}
  email:
    domain: ${EMAIL_DOMAIN:nahneedpfft.com}
  webhook:
    ses:
      verify-signature: ${SES_WEBHOOK_VERIFY_SIGNATURE:true}

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,https://yourdomain.com}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,DELETE,PUT,OPTIONS}
  allowed-headers: ${CORS_ALLOWED_HEADERS:Content-Type,Authorization,X-Requested-With}
  allow-credentials: true
  max-age: 3600

# Security headers
server:
  servlet:
    session:
      timeout: 30m
      cookie:
        secure: true
        http-only: true
        same-site: strict