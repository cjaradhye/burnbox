version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: burnbox-postgres
    environment:
      POSTGRES_DB: burnbox
      POSTGRES_USER: burnbox
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - burnbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U burnbox -d burnbox"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DynamoDB Local (for development)
  dynamodb:
    image: amazon/dynamodb-local:latest
    container_name: burnbox-dynamodb
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-dbPath", "./data"]
    volumes:
      - dynamodb_data:/home/dynamodblocal/data
    ports:
      - "8000:8000"
    networks:
      - burnbox-network
    restart: unless-stopped

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: burnbox-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_OPTS: "-Dlog4j.configuration=file:/opt/zookeeper/conf/log4j.properties"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      - burnbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: burnbox-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - burnbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: burnbox-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - burnbox-network
    restart: unless-stopped

  # Redis (for caching - optional)
  redis:
    image: redis:7-alpine
    container_name: burnbox-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - burnbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Burnbox Application
  burnbox-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: burnbox-app
    depends_on:
      postgres:
        condition: service_healthy
      # Remove Kafka/DynamoDB hard dependencies for postgres profile
      # dynamodb:
      #   condition: service_started
      # kafka:
      #   condition: service_healthy
    environment:
      # Spring Profile (default to postgres inside compose; use aws to enable hybrid mode)
      SPRING_PROFILES_ACTIVE: postgres
      
      # Database (primary variables Spring Boot will pick up automatically)
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/burnbox
      SPRING_DATASOURCE_USERNAME: burnbox
      SPRING_DATASOURCE_PASSWORD: password
      # Backwards compatibility / legacy fallbacks (can remove later)
      DATABASE_URL: jdbc:postgresql://postgres:5432/burnbox
      DATABASE_USERNAME: burnbox
      DATABASE_PASSWORD: password
      DB_POOL_SIZE: 20
      DB_POOL_MIN: 5
      
      # DynamoDB
      DYNAMODB_ENDPOINT: http://dynamodb:8000
      DYNAMODB_MAILBOX_TABLE: mailboxes
      DYNAMODB_MESSAGE_TABLE: messages
      
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_ENABLED: true
      KAFKA_GROUP_ID: burnbox-service
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-256-bit-secret-key-here-make-it-very-long-and-secure-for-production-use-only-change-this-in-production}
      JWT_EXPIRATION: 86400000
      
      # OAuth2 (use defaults if env vars not provided)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-135127202953-anhr5rlnk1oq1j6klrgea02oqbprbaaa.apps.googleusercontent.com}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-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}
      BASE_URL: ${BASE_URL:-http://localhost:8080}
      
      # AWS (optional for development)
      AWS_REGION: ${AWS_REGION:-ap-south-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-burnbox-email-storage}
      AWS_SNS_TOPIC: ${AWS_SNS_TOPIC:-}
      
      # App Config
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      EMAIL_DOMAIN: ${EMAIL_DOMAIN:-nahneedpfft.com}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: /app/logs/burnbox.log
      
      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
      
      # Server Config
      PORT: 8080
      SERVER_MAX_THREADS: 200
      SERVER_MIN_THREADS: 10
      
    ports:
      - "8080:8080"
    volumes:
      - app_logs:/app/logs
    networks:
      - burnbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  dynamodb_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  burnbox-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16